//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data.Entity;
using System.Collections.Generic;
using OpenAuth.Repository.Domain;
using OpenAuth.Repository.Mapping;

namespace OpenAuth.Repository
{
    public partial class CpContext: DbContext
    {
        static  CpContext()
        {
            Database.SetInitializer< CpContext>(null);
        }
        public CpContext()
            :base("Name=CpContext")
        { }

        public CpContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        { }

        public System.Data.Entity.DbSet<Answer> Answers { get; set; }
        public System.Data.Entity.DbSet<Application> Applications { get; set; }
        public System.Data.Entity.DbSet<Category> Categories { get; set; }
        public System.Data.Entity.DbSet<CategoryType> CategoryTypes { get; set; }
        public System.Data.Entity.DbSet<EvaluateAverageScore> EvaluateAverageScores { get; set; }
        public System.Data.Entity.DbSet<FlowInstance> FlowInstances { get; set; }
        public System.Data.Entity.DbSet<FlowInstanceOperationHistory> FlowInstanceOperationHistories { get; set; }
        public System.Data.Entity.DbSet<FlowInstanceTransitionHistory> FlowInstanceTransitionHistories { get; set; }
        public System.Data.Entity.DbSet<FlowScheme> FlowSchemes { get; set; }
        public System.Data.Entity.DbSet<Form> Forms { get; set; }
        public System.Data.Entity.DbSet<Module> Modules { get; set; }
        public System.Data.Entity.DbSet<ModuleElement> ModuleElements { get; set; }
        public System.Data.Entity.DbSet<MonthlyAssessment> MonthlyAssessments { get; set; }
        public System.Data.Entity.DbSet<MonthlyEvaluation> MonthlyEvaluations { get; set; }
        public System.Data.Entity.DbSet<Org> Orgs { get; set; }
        public System.Data.Entity.DbSet<Plan> Plans { get; set; }
        public System.Data.Entity.DbSet<Relevance> Relevances { get; set; }
        public System.Data.Entity.DbSet<Resource> Resources { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<Stock> Stocks { get; set; }
        public System.Data.Entity.DbSet<Test> Tests { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new AnswerMap());
            modelBuilder.Configurations.Add(new ApplicationMap());
            modelBuilder.Configurations.Add(new CategoryMap());
            modelBuilder.Configurations.Add(new CategoryTypeMap());
            modelBuilder.Configurations.Add(new EvaluateAverageScoreMap());
            modelBuilder.Configurations.Add(new FlowInstanceMap());
            modelBuilder.Configurations.Add(new FlowInstanceOperationHistoryMap());
            modelBuilder.Configurations.Add(new FlowInstanceTransitionHistoryMap());
            modelBuilder.Configurations.Add(new FlowSchemeMap());
            modelBuilder.Configurations.Add(new FormMap());
            modelBuilder.Configurations.Add(new ModuleMap());
            modelBuilder.Configurations.Add(new ModuleElementMap());
            modelBuilder.Configurations.Add(new MonthlyAssessmentMap());
            modelBuilder.Configurations.Add(new MonthlyEvaluationMap());
            modelBuilder.Configurations.Add(new OrgMap());
            modelBuilder.Configurations.Add(new PlanMap());
            modelBuilder.Configurations.Add(new RelevanceMap());
            modelBuilder.Configurations.Add(new ResourceMap());
            modelBuilder.Configurations.Add(new RoleMap());
            modelBuilder.Configurations.Add(new StockMap());
            modelBuilder.Configurations.Add(new TestMap());
            modelBuilder.Configurations.Add(new UserMap());

           // InitializeMapping(modelBuilder);
        }
    }
}